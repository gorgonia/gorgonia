package stdops

import (
	"context"

	"gorgonia.org/gorgonia/exprgraph"
	"gorgonia.org/gorgonia/values/dual"
)

// Code generated by genops, which is a ops generation tool for Gorgonia. DO NOT EDIT.

// DoDiff is the method that allows automatic differentiation of `sub` g.
func (op subOp) DoDiff(ctx context.Context, inputs []Tensor, output Tensor) error {
	adv := exprgraph.T2B(inputs[0]).(*dual.Dual)
	bdv := exprgraph.T2B(inputs[1]).(*dual.Dual)
	cdv := exprgraph.T2B(output).(*dual.Dual)

	advd := adv.Deriv()
	bdvd := bdv.Deriv()

	_, _, _ = cdv, advd, bdvd
	panic("Not implemented")
}

// DoDiff is the method that allows automatic differentiation of `mul` g.
func (op mulOp) DoDiff(ctx context.Context, inputs []Tensor, output Tensor) error {
	adv := exprgraph.T2B(inputs[0]).(*dual.Dual)
	bdv := exprgraph.T2B(inputs[1]).(*dual.Dual)
	cdv := exprgraph.T2B(output).(*dual.Dual)

	advd := adv.Deriv()
	bdvd := bdv.Deriv()

	_, _, _ = cdv, advd, bdvd
	panic("Not implemented")
}

// DoDiff is the method that allows automatic differentiation of `div` g.
func (op divOp) DoDiff(ctx context.Context, inputs []Tensor, output Tensor) error {
	adv := exprgraph.T2B(inputs[0]).(*dual.Dual)
	bdv := exprgraph.T2B(inputs[1]).(*dual.Dual)
	cdv := exprgraph.T2B(output).(*dual.Dual)

	advd := adv.Deriv()
	bdvd := bdv.Deriv()

	_, _, _ = cdv, advd, bdvd
	panic("Not implemented")
}

// SymDiff performs the symbolic differentiation of pow.
func (op powOp) SymDiff(g *exprgraph.Graph, inputs []*exprgraph.Node, output *exprgraph.Node, grad *exprgraph.Node) (retVal []*exprgraph.Node, err error) {
	panic("not implemented")
}

// DoDiff is the method that allows automatic differentiation of `pow` g.
func (op powOp) DoDiff(ctx context.Context, inputs []Tensor, output Tensor) error {
	adv := exprgraph.T2B(inputs[0]).(*dual.Dual)
	bdv := exprgraph.T2B(inputs[1]).(*dual.Dual)
	cdv := exprgraph.T2B(output).(*dual.Dual)

	advd := adv.Deriv()
	bdvd := bdv.Deriv()

	_, _, _ = cdv, advd, bdvd
	panic("Not implemented")
}

// SymDiff performs the symbolic differentiation of exp.
func (op expOp) SymDiff(g *exprgraph.Graph, inputs []*exprgraph.Node, output *exprgraph.Node, grad *exprgraph.Node) (retVal []*exprgraph.Node, err error) {
	panic("not implemented")
}

// DoDiff is the method that allows automatic differentiation of `exp` g.
func (op expOp) DoDiff(ctx context.Context, inputs []Tensor, output Tensor) error {
	adv := exprgraph.T2B(inputs[0]).(*dual.Dual)
	bdv := exprgraph.T2B(inputs[1]).(*dual.Dual)
	cdv := exprgraph.T2B(output).(*dual.Dual)

	advd := adv.Deriv()
	bdvd := bdv.Deriv()

	_, _, _ = cdv, advd, bdvd
	panic("Not implemented")
}

// SymDiff performs the symbolic differentiation of ln.
func (op lnOp) SymDiff(g *exprgraph.Graph, inputs []*exprgraph.Node, output *exprgraph.Node, grad *exprgraph.Node) (retVal []*exprgraph.Node, err error) {
	panic("not implemented")
}

// DoDiff is the method that allows automatic differentiation of `ln` g.
func (op lnOp) DoDiff(ctx context.Context, inputs []Tensor, output Tensor) error {
	adv := exprgraph.T2B(inputs[0]).(*dual.Dual)
	bdv := exprgraph.T2B(inputs[1]).(*dual.Dual)
	cdv := exprgraph.T2B(output).(*dual.Dual)

	advd := adv.Deriv()
	bdvd := bdv.Deriv()

	_, _, _ = cdv, advd, bdvd
	panic("Not implemented")
}

// SymDiff performs the symbolic differentiation of log2.
func (op log2Op) SymDiff(g *exprgraph.Graph, inputs []*exprgraph.Node, output *exprgraph.Node, grad *exprgraph.Node) (retVal []*exprgraph.Node, err error) {
	panic("not implemented")
}

// DoDiff is the method that allows automatic differentiation of `log2` g.
func (op log2Op) DoDiff(ctx context.Context, inputs []Tensor, output Tensor) error {
	adv := exprgraph.T2B(inputs[0]).(*dual.Dual)
	bdv := exprgraph.T2B(inputs[1]).(*dual.Dual)
	cdv := exprgraph.T2B(output).(*dual.Dual)

	advd := adv.Deriv()
	bdvd := bdv.Deriv()

	_, _, _ = cdv, advd, bdvd
	panic("Not implemented")
}

// SymDiff performs the symbolic differentiation of neg.
func (op negOp) SymDiff(g *exprgraph.Graph, inputs []*exprgraph.Node, output *exprgraph.Node, grad *exprgraph.Node) (retVal []*exprgraph.Node, err error) {
	panic("not implemented")
}

// DoDiff is the method that allows automatic differentiation of `neg` g.
func (op negOp) DoDiff(ctx context.Context, inputs []Tensor, output Tensor) error {
	adv := exprgraph.T2B(inputs[0]).(*dual.Dual)
	bdv := exprgraph.T2B(inputs[1]).(*dual.Dual)
	cdv := exprgraph.T2B(output).(*dual.Dual)

	advd := adv.Deriv()
	bdvd := bdv.Deriv()

	_, _, _ = cdv, advd, bdvd
	panic("Not implemented")
}

// SymDiff performs the symbolic differentiation of square.
func (op squareOp) SymDiff(g *exprgraph.Graph, inputs []*exprgraph.Node, output *exprgraph.Node, grad *exprgraph.Node) (retVal []*exprgraph.Node, err error) {
	panic("not implemented")
}

// DoDiff is the method that allows automatic differentiation of `square` g.
func (op squareOp) DoDiff(ctx context.Context, inputs []Tensor, output Tensor) error {
	adv := exprgraph.T2B(inputs[0]).(*dual.Dual)
	bdv := exprgraph.T2B(inputs[1]).(*dual.Dual)
	cdv := exprgraph.T2B(output).(*dual.Dual)

	advd := adv.Deriv()
	bdvd := bdv.Deriv()

	_, _, _ = cdv, advd, bdvd
	panic("Not implemented")
}

// SymDiff performs the symbolic differentiation of sqrt.
func (op sqrtOp) SymDiff(g *exprgraph.Graph, inputs []*exprgraph.Node, output *exprgraph.Node, grad *exprgraph.Node) (retVal []*exprgraph.Node, err error) {
	panic("not implemented")
}

// DoDiff is the method that allows automatic differentiation of `sqrt` g.
func (op sqrtOp) DoDiff(ctx context.Context, inputs []Tensor, output Tensor) error {
	adv := exprgraph.T2B(inputs[0]).(*dual.Dual)
	bdv := exprgraph.T2B(inputs[1]).(*dual.Dual)
	cdv := exprgraph.T2B(output).(*dual.Dual)

	advd := adv.Deriv()
	bdvd := bdv.Deriv()

	_, _, _ = cdv, advd, bdvd
	panic("Not implemented")
}

// SymDiff performs the symbolic differentiation of inv.
func (op invOp) SymDiff(g *exprgraph.Graph, inputs []*exprgraph.Node, output *exprgraph.Node, grad *exprgraph.Node) (retVal []*exprgraph.Node, err error) {
	panic("not implemented")
}

// DoDiff is the method that allows automatic differentiation of `inv` g.
func (op invOp) DoDiff(ctx context.Context, inputs []Tensor, output Tensor) error {
	adv := exprgraph.T2B(inputs[0]).(*dual.Dual)
	bdv := exprgraph.T2B(inputs[1]).(*dual.Dual)
	cdv := exprgraph.T2B(output).(*dual.Dual)

	advd := adv.Deriv()
	bdvd := bdv.Deriv()

	_, _, _ = cdv, advd, bdvd
	panic("Not implemented")
}

// SymDiff performs the symbolic differentiation of invSqrt.
func (op invSqrtOp) SymDiff(g *exprgraph.Graph, inputs []*exprgraph.Node, output *exprgraph.Node, grad *exprgraph.Node) (retVal []*exprgraph.Node, err error) {
	panic("not implemented")
}

// DoDiff is the method that allows automatic differentiation of `invSqrt` g.
func (op invSqrtOp) DoDiff(ctx context.Context, inputs []Tensor, output Tensor) error {
	adv := exprgraph.T2B(inputs[0]).(*dual.Dual)
	bdv := exprgraph.T2B(inputs[1]).(*dual.Dual)
	cdv := exprgraph.T2B(output).(*dual.Dual)

	advd := adv.Deriv()
	bdvd := bdv.Deriv()

	_, _, _ = cdv, advd, bdvd
	panic("Not implemented")
}

// SymDiff performs the symbolic differentiation of cube.
func (op cubeOp) SymDiff(g *exprgraph.Graph, inputs []*exprgraph.Node, output *exprgraph.Node, grad *exprgraph.Node) (retVal []*exprgraph.Node, err error) {
	panic("not implemented")
}

// DoDiff is the method that allows automatic differentiation of `cube` g.
func (op cubeOp) DoDiff(ctx context.Context, inputs []Tensor, output Tensor) error {
	adv := exprgraph.T2B(inputs[0]).(*dual.Dual)
	bdv := exprgraph.T2B(inputs[1]).(*dual.Dual)
	cdv := exprgraph.T2B(output).(*dual.Dual)

	advd := adv.Deriv()
	bdvd := bdv.Deriv()

	_, _, _ = cdv, advd, bdvd
	panic("Not implemented")
}

// SymDiff performs the symbolic differentiation of tanh.
func (op tanhOp) SymDiff(g *exprgraph.Graph, inputs []*exprgraph.Node, output *exprgraph.Node, grad *exprgraph.Node) (retVal []*exprgraph.Node, err error) {
	panic("not implemented")
}

// DoDiff is the method that allows automatic differentiation of `tanh` g.
func (op tanhOp) DoDiff(ctx context.Context, inputs []Tensor, output Tensor) error {
	adv := exprgraph.T2B(inputs[0]).(*dual.Dual)
	bdv := exprgraph.T2B(inputs[1]).(*dual.Dual)
	cdv := exprgraph.T2B(output).(*dual.Dual)

	advd := adv.Deriv()
	bdvd := bdv.Deriv()

	_, _, _ = cdv, advd, bdvd
	panic("Not implemented")
}
