package stdops

// Code generated by genops, which is a ops generation tool for Gorgonia. DO NOT EDIT.

import (
	"context"
	"runtime/trace"

	"github.com/chewxy/hm"
	gctx "gorgonia.org/gorgonia/internal/context"
	"gorgonia.org/gorgonia/types"
	"gorgonia.org/gorgonia/values"
)

// gteOp is the base op for elementwise greater-than-or-equal-to.
type gteOp[DT any, T values.Value[DT]] struct {
	binop
	retSame bool
}

// String implements fmt.Stringer.
func (op gteOp[DT, T]) String() string { return "≥" }

// Do performs elementwise greater-than-or-equal-to.
func (op gteOp[DT, T]) Do(ctx context.Context, vs ...T) (retVal T, err error) {
	if err := gctx.Handle(ctx); err != nil {
		return retVal, err
	}

	a := vs[0]
	b := vs[1]

	// Do the actual operation
	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Gte(a, b, tensor.WithContext(ctx2), tensor.AsSameType())
	} else {
		retVal, err = tensor.Gte(a, b, tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}

// PreallocDo performs elementwise greater-than-or-equal-to but with a preallocated return value.
// PreallocDo allows gte to implement ops.PreallocOp.
func (op gteOp[DT, T]) PreallocDo(ctx context.Context, prealloc T, vs ...T) (retVal T, err error) {
	if err := gctx.Handle(ctx); err != nil {
		return retVal, err
	}

	a := vs[0]
	b := vs[1]

	ctx2, task := trace.NewTask(ctx, op.String())
	if op.retSame {
		retVal, err = tensor.Gte(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2), tensor.AsSameType())
	} else {
		retVal, err = tensor.Gte(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2))
	}
	task.End()
	return retVal, err
}                                                 // DiffWRT returns {false, false} for gte
func (op gteOp[DT, T]) DiffWRT(inputs int) []bool { return twofalses }

// gteVV is a tensor-tensor elementwise greater-than-or-equal-to.
type gteVV[DT any, T values.Value[DT]] struct {
	gteOp[DT, T]
	binopVV
}

// Type returns the type: (·) : a → a → a or (·) :  a → a → b
func (op gteVV[DT, T]) Type() hm.Type {
	a := hm.TypeVariable('a') // (T U) or U
	if op.retSame {
		return types.NewFunc(a, a, a)
	}
	b := types.MakeDependent(a, tensor.Bool) // (T Bool) or Bool
	return types.NewFunc(a, a, b)
}

// gteVS is a tensor-scalar elementwise greater-than-or-equal-to.
type gteVS[DT any, T values.Value[DT]] struct {
	gteOp[DT, T]
	binopVS
}

// String implements fmt.Stringer.
func (op gteVS[DT, T]) String() string { return "≥·" }

// Type returns the type: (·) : a → b → a or (·) :  a → b → c
func (op gteVS) Type() hm.Type {
	a := hm.TypeVariable('a') // (T U) or U
	b := hm.TypeVariable('b') // U
	if op.retSame {
		return types.NewFunc(a, b, a)
	}
	c := types.MakeDependent(a, tensor.Bool) // (T Bool) or Bool
	return types.NewFunc(a, b, c)
}

// gteSV is a scalar-tensor elementwise greater-than-or-equal-to.
type gteSV[DT any, T values.Value[DT]] struct {
	gteOp[DT, T]
	binopSV
}

// String implements fmt.Stringer.
func (op gteSV[DT, T]) String() string { return "·≥" }

// Type returns the type: (·) : a → b → b or (·) :  a → b → c
func (op gteSV[DT, T]) Type() hm.Type {
	a := hm.TypeVariable('a') // U
	b := hm.TypeVariable('b') // (T U) or U
	if op.retSame {
		return types.NewFunc(a, b, b)
	}
	c := types.MakeDependent(b, tensor.Bool) // (T Bool) or Bool
	return types.NewFunc(a, b, c)
}
