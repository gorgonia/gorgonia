package stdops

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"gorgonia.org/gorgonia/ops"
	"gorgonia.org/tensor"
	"gorgonia.org/tensor/dense"
)

// Code generated by genops, which is a ops generation tool for Gorgonia. DO NOT EDIT.

func TestAdd(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Desc

	// test vv
	a := dense.New[float64](tensor.WithShape(2, 3))
	b := dense.New[float64](tensor.WithShape(2, 3))
	op = Add[float64, *dense.Dense[float64]](a, b)
	expected = addVV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test vs
	b = dense.New[float64](tensor.WithShape())
	op = Add[float64, *dense.Dense[float64]](a, b)
	expected = addVS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test sv
	op = Add[float64, *dense.Dense[float64]](b, a)
	expected = addSV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test ss
	a = dense.New[float64](tensor.WithShape())
	op = Add[float64, *dense.Dense[float64]](a, b)
	expected = addVV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

}

func TestSub(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Desc

	// test vv
	a := dense.New[float64](tensor.WithShape(2, 3))
	b := dense.New[float64](tensor.WithShape(2, 3))
	op = Sub[float64, *dense.Dense[float64]](a, b)
	expected = subVV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test vs
	b = dense.New[float64](tensor.WithShape())
	op = Sub[float64, *dense.Dense[float64]](a, b)
	expected = subVS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test sv
	op = Sub[float64, *dense.Dense[float64]](b, a)
	expected = subSV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test ss
	a = dense.New[float64](tensor.WithShape())
	op = Sub[float64, *dense.Dense[float64]](a, b)
	expected = subVV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

}

func TestMul(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Desc

	// test vv
	a := dense.New[float64](tensor.WithShape(2, 3))
	b := dense.New[float64](tensor.WithShape(2, 3))
	op = Mul[float64, *dense.Dense[float64]](a, b)
	expected = mulVV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test vs
	b = dense.New[float64](tensor.WithShape())
	op = Mul[float64, *dense.Dense[float64]](a, b)
	expected = mulVS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test sv
	op = Mul[float64, *dense.Dense[float64]](b, a)
	expected = mulSV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test ss
	a = dense.New[float64](tensor.WithShape())
	op = Mul[float64, *dense.Dense[float64]](a, b)
	expected = mulVV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

}

func TestDiv(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Desc

	// test vv
	a := dense.New[float64](tensor.WithShape(2, 3))
	b := dense.New[float64](tensor.WithShape(2, 3))
	op = Div[float64, *dense.Dense[float64]](a, b)
	expected = divVV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test vs
	b = dense.New[float64](tensor.WithShape())
	op = Div[float64, *dense.Dense[float64]](a, b)
	expected = divVS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test sv
	op = Div[float64, *dense.Dense[float64]](b, a)
	expected = divSV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test ss
	a = dense.New[float64](tensor.WithShape())
	op = Div[float64, *dense.Dense[float64]](a, b)
	expected = divVV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

}

func TestPow(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Desc

	// test vv
	a := dense.New[float64](tensor.WithShape(2, 3))
	b := dense.New[float64](tensor.WithShape(2, 3))
	op = Pow[float64, *dense.Dense[float64]](a, b)
	expected = powVV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test vs
	b = dense.New[float64](tensor.WithShape())
	op = Pow[float64, *dense.Dense[float64]](a, b)
	expected = powVS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test sv
	op = Pow[float64, *dense.Dense[float64]](b, a)
	expected = powSV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test ss
	a = dense.New[float64](tensor.WithShape())
	op = Pow[float64, *dense.Dense[float64]](a, b)
	expected = powVV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

}

func TestMod(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Desc

	// test vv
	a := dense.New[float64](tensor.WithShape(2, 3))
	b := dense.New[float64](tensor.WithShape(2, 3))
	op = Mod[float64, *dense.Dense[float64]](a, b)
	expected = modVV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test vs
	b = dense.New[float64](tensor.WithShape())
	op = Mod[float64, *dense.Dense[float64]](a, b)
	expected = modVS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test sv
	op = Mod[float64, *dense.Dense[float64]](b, a)
	expected = modSV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test ss
	a = dense.New[float64](tensor.WithShape())
	op = Mod[float64, *dense.Dense[float64]](a, b)
	expected = modVV[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

}

func TestLt(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Desc

	// test vv
	a := dense.New[float64](tensor.WithShape(2, 3))
	b := dense.New[float64](tensor.WithShape(2, 3))
	op = Lt[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = ltVV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test vv but retSame = true
	op = Lt[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = ltVVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test vs
	b = dense.New[float64](tensor.WithShape())
	op = Lt[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = ltVS[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test vs but retSame = true
	op = Lt[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = ltVSRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test sv
	op = Lt[float64, *dense.Dense[float64], *dense.Dense[bool]](b, a)
	expected = ltSV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test sv but retSame = true
	op = Lt[float64, *dense.Dense[float64], *dense.Dense[float64]](b, a)
	expected = ltSVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test ss
	a = dense.New[float64](tensor.WithShape())
	op = Lt[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = ltVV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test ss but retSame = true
	op = Lt[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = ltVVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

}

func TestLte(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Desc

	// test vv
	a := dense.New[float64](tensor.WithShape(2, 3))
	b := dense.New[float64](tensor.WithShape(2, 3))
	op = Lte[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = lteVV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test vv but retSame = true
	op = Lte[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = lteVVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test vs
	b = dense.New[float64](tensor.WithShape())
	op = Lte[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = lteVS[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test vs but retSame = true
	op = Lte[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = lteVSRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test sv
	op = Lte[float64, *dense.Dense[float64], *dense.Dense[bool]](b, a)
	expected = lteSV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test sv but retSame = true
	op = Lte[float64, *dense.Dense[float64], *dense.Dense[float64]](b, a)
	expected = lteSVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test ss
	a = dense.New[float64](tensor.WithShape())
	op = Lte[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = lteVV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test ss but retSame = true
	op = Lte[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = lteVVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

}

func TestGt(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Desc

	// test vv
	a := dense.New[float64](tensor.WithShape(2, 3))
	b := dense.New[float64](tensor.WithShape(2, 3))
	op = Gt[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = gtVV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test vv but retSame = true
	op = Gt[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = gtVVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test vs
	b = dense.New[float64](tensor.WithShape())
	op = Gt[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = gtVS[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test vs but retSame = true
	op = Gt[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = gtVSRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test sv
	op = Gt[float64, *dense.Dense[float64], *dense.Dense[bool]](b, a)
	expected = gtSV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test sv but retSame = true
	op = Gt[float64, *dense.Dense[float64], *dense.Dense[float64]](b, a)
	expected = gtSVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test ss
	a = dense.New[float64](tensor.WithShape())
	op = Gt[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = gtVV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test ss but retSame = true
	op = Gt[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = gtVVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

}

func TestGte(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Desc

	// test vv
	a := dense.New[float64](tensor.WithShape(2, 3))
	b := dense.New[float64](tensor.WithShape(2, 3))
	op = Gte[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = gteVV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test vv but retSame = true
	op = Gte[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = gteVVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test vs
	b = dense.New[float64](tensor.WithShape())
	op = Gte[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = gteVS[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test vs but retSame = true
	op = Gte[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = gteVSRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test sv
	op = Gte[float64, *dense.Dense[float64], *dense.Dense[bool]](b, a)
	expected = gteSV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test sv but retSame = true
	op = Gte[float64, *dense.Dense[float64], *dense.Dense[float64]](b, a)
	expected = gteSVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test ss
	a = dense.New[float64](tensor.WithShape())
	op = Gte[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = gteVV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test ss but retSame = true
	op = Gte[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = gteVVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

}

func TestElEq(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Desc

	// test vv
	a := dense.New[float64](tensor.WithShape(2, 3))
	b := dense.New[float64](tensor.WithShape(2, 3))
	op = ElEq[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = elEqVV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test vv but retSame = true
	op = ElEq[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = elEqVVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test vs
	b = dense.New[float64](tensor.WithShape())
	op = ElEq[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = elEqVS[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test vs but retSame = true
	op = ElEq[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = elEqVSRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test sv
	op = ElEq[float64, *dense.Dense[float64], *dense.Dense[bool]](b, a)
	expected = elEqSV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test sv but retSame = true
	op = ElEq[float64, *dense.Dense[float64], *dense.Dense[float64]](b, a)
	expected = elEqSVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test ss
	a = dense.New[float64](tensor.WithShape())
	op = ElEq[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = elEqVV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test ss but retSame = true
	op = ElEq[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = elEqVVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

}

func TestElNe(t *testing.T) {
	assert := assert.New(t)

	var op, expected ops.Desc

	// test vv
	a := dense.New[float64](tensor.WithShape(2, 3))
	b := dense.New[float64](tensor.WithShape(2, 3))
	op = ElNe[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = elNeVV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test vv but retSame = true
	op = ElNe[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = elNeVVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test vs
	b = dense.New[float64](tensor.WithShape())
	op = ElNe[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = elNeVS[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test vs but retSame = true
	op = ElNe[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = elNeVSRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test sv
	op = ElNe[float64, *dense.Dense[float64], *dense.Dense[bool]](b, a)
	expected = elNeSV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test sv but retSame = true
	op = ElNe[float64, *dense.Dense[float64], *dense.Dense[float64]](b, a)
	expected = elNeSVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

	// test ss
	a = dense.New[float64](tensor.WithShape())
	op = ElNe[float64, *dense.Dense[float64], *dense.Dense[bool]](a, b)
	expected = elNeVV[float64, *dense.Dense[float64], *dense.Dense[bool]]{}
	assert.Equal(op, expected)

	// test ss but retSame = true
	op = ElNe[float64, *dense.Dense[float64], *dense.Dense[float64]](a, b)
	expected = elNeVVRS[float64, *dense.Dense[float64]]{}
	assert.Equal(op, expected)

}
