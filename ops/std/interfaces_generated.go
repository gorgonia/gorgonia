package stdops

import (
	"context"

	"gorgonia.org/tensor"
)

// Code generated by genops, which is a ops generation tool for Gorgonia. DO NOT EDIT.

type Abser[DT any, T tensor.Basic[DT]] interface {
	Abs(ctx context.Context, a, retVal T) error
}

type Cuber[DT any, T tensor.Basic[DT]] interface {
	Cube(ctx context.Context, a, retVal T) error
}

type ExpLoger[DT any, T tensor.Basic[DT]] interface {
	Exp(ctx context.Context, a, retVal T) error
	Log(ctx context.Context, a, retVal T) error
	Log2(ctx context.Context, a, retVal T) error
	Neg(ctx context.Context, a, retVal T) error
	Log1p(ctx context.Context, a, retVal T) error
	Expm1(ctx context.Context, a, retVal T) error
}

type IntRepr[DT any, T tensor.Basic[DT]] interface {
	Ceil(ctx context.Context, a, retVal T) error
	Floor(ctx context.Context, a, retVal T) error
}

type InvSqrter[DT any, T tensor.Basic[DT]] interface {
	InvSqrt(ctx context.Context, a, retVal T) error
}

type Inver[DT any, T tensor.Basic[DT]] interface {
	Inv(ctx context.Context, a, retVal T) error
}

type Signer[DT any, T tensor.Basic[DT]] interface {
	Sign(ctx context.Context, a, retVal T) error
}

type Squarer[DT any, T tensor.Basic[DT]] interface {
	Square(ctx context.Context, a, retVal T) error
}

type Squarter[DT any, T tensor.Basic[DT]] interface {
	Sqrt(ctx context.Context, a, retVal T) error
}

type Tanher[DT any, T tensor.Basic[DT]] interface {
	Tanh(ctx context.Context, a, retVal T) error
}
