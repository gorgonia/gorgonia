package stdops

// Code generated by genops, which is a ops generation tool for Gorgonia. DO NOT EDIT.

import (
	"context"
	"runtime/trace"

	"gorgonia.org/gorgonia/internal"
	"gorgonia.org/gorgonia/internal/errors"
	"gorgonia.org/gorgonia/values"
	"gorgonia.org/tensor"
)

// addOp is the base op for elementwise addition.
type addOp[DT any, T values.Value[DT]] struct{ binop }

// String implements fmt.Stringer.
func (op addOp[DT, T]) String() string { return "+" }

func (op addOp[DT, T]) do(ctx context.Context, a, b, prealloc T) (retVal T, err error) {
	if err := internal.HandleCtx(ctx); err != nil {
		return retVal, err
	}

	ctx2, task := trace.NewTask(ctx, op.String())
	defer task.End()

	e, newAPA, newAPB, ret, fo, err := tensor.PrepBasicBinOpCis[DT](a, b, tensor.WithReuse(prealloc))
	if err != nil {
		return retVal, err
	}
	toIncr := fo.Incr
	toBroadcast := fo.Broadcast
	retVal = ret.(T)

	adder, ok := e.(tensor.Adder[DT, T])
	if !ok {
		return retVal, errors.Errorf(errors.EngineSupport, e, adder, errors.ThisFn())
	}

	switch {
	case toBroadcast:
		err = adder.AddBroadcastable(ctx, a, b, retVal, newAPA, newAPB, toIncr)
	default:
		if err := checkCompatibleShape(a.Shape(), b.Shape()); err != nil {
			return retVal, err
		}
		err = adder.Add(ctx2, a, b, retVal, toIncr)
	}
	return retVal, err
}

// Do performs elementwise addition.
func (op addOp[DT, T]) Do(ctx context.Context, vs ...T) (retVal T, err error) {
	a := vs[0]
	b := vs[1]
	var prealloc T
	return op.do(ctx, a, b, prealloc)
}

// PreallocDo performs elementwise addition but with a preallocated return value.
// PreallocDo allows add to implement ops.PreallocOp.
func (op addOp[DT, T]) PreallocDo(ctx context.Context, prealloc T, vs ...T) (retVal T, err error) {
	a := vs[0]
	b := vs[1]
	return op.do(ctx, a, b, prealloc)
}

// addVV is a tensor-tensor elementwise addition.
type addVV[DT any, T values.Value[DT]] struct {
	addOp[DT, T]
	binopVV
}

// addVS is a tensor-scalar elementwise addition.
type addVS[DT any, T values.Value[DT]] struct {
	addOp[DT, T]
	binopVS
}

// String implements fmt.Stringer.
func (op addVS[DT, T]) String() string { return "+·" }

// addSV is a scalar-tensor elementwise addition.
type addSV[DT any, T values.Value[DT]] struct {
	addOp[DT, T]
	binopSV
}

// String implements fmt.Stringer.
func (op addSV[DT, T]) String() string { return "·+" }
