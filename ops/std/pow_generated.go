package stdops

// Code generated by genops, which is a ops generation tool for Gorgonia. DO NOT EDIT.

import (
	"context"
	"runtime/trace"

	gctx "gorgonia.org/gorgonia/internal/context"
	"gorgonia.org/gorgonia/values"
)

// powOp is the base op for elementwise exponentiation.
type powOp[DT any, T values.Value[DT]] struct{ binop }

// String implements fmt.Stringer.
func (op powOp[DT, T]) String() string { return "^" }

// Do performs elementwise exponentiation.
func (op powOp[DT, T]) Do(ctx context.Context, vs ...T) (retVal T, err error) {
	if err := gctx.Handle(ctx); err != nil {
		return nil, err
	}

	a := vs[0]
	b := vs[1]

	ctx2, task := trace.NewTask(ctx, op.String())
	retVal, err = tensor.Pow(a, b, tensor.WithContext(ctx2))
	task.End()
	return retVal, err
}

// PreallocDo performs elementwise exponentiation but with a preallocated return value.
// PreallocDo allows pow to implement ops.PreallocOp.
func (op powOp[DT, T]) PreallocDo(ctx context.Context, prealloc T, vs ...T) (retVal T, err error) {
	if err := gctx.Handle(ctx); err != nil {
		return nil, err
	}

	a := vs[0]
	b := vs[1]

	ctx2, task := trace.NewTask(ctx, op.String())
	retVal, err = tensor.Pow(a, b, tensor.WithReuse(prealloc), tensor.WithContext(ctx2))
	task.End()
	return retVal, err
}

// powVV is a tensor-tensor elementwise exponentiation.
type powVV[DT any, T values.Value[DT]] struct {
	powOp[DT, T]
	binopVV
}

// powVS is a tensor-scalar elementwise exponentiation.
type powVS[DT any, T values.Value[DT]] struct {
	powOp[DT, T]
	binopVS
}

// String implements fmt.Stringer.
func (op powVS) String() string { return "^·" }

// powSV is a scalar-tensor elementwise exponentiation.
type powSV[DT any, T values.Value[DT]] struct {
	powOp[DT, T]
	binopSV
}

// String implements fmt.Stringer.
func (op powSV) String() string { return "·^" }
